/* tslint:disable */
/* eslint-disable */
/**
 * Public API
 * A showcase API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'guid'?: string;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'createdBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'createdOn'?: string;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'modifiedBy'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'modifiedOn'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Image
     */
    'isTest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'url'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'resolution'?: number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'group'?: number;
    /**
     * 
     * @type {ImageResolution}
     * @memberof Image
     */
    'resolutionNavigation'?: ImageResolution;
    /**
     * 
     * @type {ImageGroup}
     * @memberof Image
     */
    'groupNavigation'?: ImageGroup;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'fileName'?: string | null;
}
/**
 * 
 * @export
 * @interface ImageFileExtension
 */
export interface ImageFileExtension {
    /**
     * 
     * @type {number}
     * @memberof ImageFileExtension
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageFileExtension
     */
    'guid'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageFileExtension
     */
    'createdBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageFileExtension
     */
    'createdOn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageFileExtension
     */
    'modifiedBy'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ImageFileExtension
     */
    'modifiedOn'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageFileExtension
     */
    'isTest'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ImageFileExtension
     */
    'imageType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageFileExtension
     */
    'fileExtension'?: string | null;
    /**
     * 
     * @type {ImageType}
     * @memberof ImageFileExtension
     */
    'imageTypeNavigation'?: ImageType;
}
/**
 * 
 * @export
 * @interface ImageGroup
 */
export interface ImageGroup {
    /**
     * 
     * @type {number}
     * @memberof ImageGroup
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageGroup
     */
    'guid'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageGroup
     */
    'createdBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageGroup
     */
    'createdOn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageGroup
     */
    'modifiedBy'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ImageGroup
     */
    'modifiedOn'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageGroup
     */
    'isTest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageGroup
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImageGroup
     */
    'type'?: number;
    /**
     * 
     * @type {ImageType}
     * @memberof ImageGroup
     */
    'typeNavigation'?: ImageType;
    /**
     * 
     * @type {Array<Image>}
     * @memberof ImageGroup
     */
    'Images'?: Array<Image> | null;
}
/**
 * 
 * @export
 * @interface ImageResolution
 */
export interface ImageResolution {
    /**
     * 
     * @type {number}
     * @memberof ImageResolution
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageResolution
     */
    'guid'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageResolution
     */
    'createdBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageResolution
     */
    'createdOn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageResolution
     */
    'modifiedBy'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ImageResolution
     */
    'modifiedOn'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageResolution
     */
    'isTest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageResolution
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<Image>}
     * @memberof ImageResolution
     */
    'imagesNavigation'?: Array<Image> | null;
}
/**
 * 
 * @export
 * @interface ImageType
 */
export interface ImageType {
    /**
     * 
     * @type {number}
     * @memberof ImageType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageType
     */
    'guid'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageType
     */
    'createdBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageType
     */
    'createdOn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageType
     */
    'modifiedBy'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ImageType
     */
    'modifiedOn'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageType
     */
    'isTest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageType
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageType
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<ImageFileExtension>}
     * @memberof ImageType
     */
    'fileExtensionNavigation'?: Array<ImageFileExtension> | null;
    /**
     * 
     * @type {Array<ImageGroup>}
     * @memberof ImageType
     */
    'imageGroupNavigation'?: Array<ImageGroup> | null;
}

/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageGroupIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ImageGroupIdDelete', 'id', id)
            const localVarPath = `/api/v1/ImageGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageGroupIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ImageGroupIdGet', 'id', id)
            const localVarPath = `/api/v1/ImageGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageGroupPost: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ImageGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ImageIdGet', 'id', id)
            const localVarPath = `/api/v1/Image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImageGroupIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ImageGroupIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiV1ImageGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImageGroupIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ImageGroupIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiV1ImageGroupIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImageGroupPost(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ImageGroupPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiV1ImageGroupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImageIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ImageIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiV1ImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageGroupIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ImageGroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageGroupIdGet(id: number, options?: any): AxiosPromise<ImageGroup> {
            return localVarFp.apiV1ImageGroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageGroupPost(file?: File, options?: any): AxiosPromise<ImageGroup> {
            return localVarFp.apiV1ImageGroupPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImageIdGet(id: number, options?: any): AxiosPromise<Image> {
            return localVarFp.apiV1ImageIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiV1ImageGroupIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiV1ImageGroupIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiV1ImageGroupIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiV1ImageGroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiV1ImageGroupPost(file?: File, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiV1ImageGroupPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiV1ImageIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiV1ImageIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDeleteAllTestEntitiesDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Test/DeleteAllTestEntities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGetOkGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Test/GetOk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testThrowInternalServerErrorPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Test/ThrowInternalServerError`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testDeleteAllTestEntitiesDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testDeleteAllTestEntitiesDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.testDeleteAllTestEntitiesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testGetOkGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testGetOkGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.testGetOkGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testThrowInternalServerErrorPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testThrowInternalServerErrorPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.testThrowInternalServerErrorPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDeleteAllTestEntitiesDelete(options?: any): AxiosPromise<void> {
            return localVarFp.testDeleteAllTestEntitiesDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testGetOkGet(options?: any): AxiosPromise<void> {
            return localVarFp.testGetOkGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testThrowInternalServerErrorPost(options?: any): AxiosPromise<void> {
            return localVarFp.testThrowInternalServerErrorPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testDeleteAllTestEntitiesDelete(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).testDeleteAllTestEntitiesDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testGetOkGet(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).testGetOkGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testThrowInternalServerErrorPost(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).testThrowInternalServerErrorPost(options).then((request) => request(this.axios, this.basePath));
    }
}



